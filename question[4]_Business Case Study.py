# -*- coding: utf-8 -*-
"""Question[4] Python Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wqR1TbMw3cfndTG4WdotPybGe-0cVNjW

# 4. Business Case Study: Discount Impact Analysis
##Objective
### Analyze the impact of discount strategies on profitability and retention.
##Tasks
###(A) Compare customer spending behavior before and after discounts.
###(B) Identify customer segments most responsive to discounts.
###(C) Recommend a strategy to maximize revenue while maintaining profitability.
## Dataset: discount_campaign.csv
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df = pd.read_csv("/content/discount_campaign.csv")

"""## [4(A)] Compare customer spending behavior before and after discounts."""

# find order_count_change in Percentage
df["order_count_change"] = ((df["order_count_after"] - df["order_count_before"]) / df["order_count_before"]) * 100

# find total_spend_change in percentage
df["total_spend_change"] = ((df["total_spend_after"] - df["total_spend_before"]) / df["total_spend_before"]) * 100

df

# Group_by discount status and find averages
discount_analysis = df.groupby("discount_applied").agg(
    avg_order_count_before=("order_count_before", "mean"),
    avg_order_count_after=("order_count_after", "mean"),
    avg_order_count_change=("order_count_change", "mean"),
    avg_spend_before=("total_spend_before", "mean"),
    avg_spend_after=("total_spend_after", "mean"),
    avg_spend_change=("total_spend_change", "mean")
).reset_index()

# Summary analysis
discount_analysis

bar_width = 0.35
x = np.arange(len(discount_analysis["discount_applied"]))
# figure
fig, ax = plt.subplots(figsize=(8, 5))

# bars Plot
ax.bar(x, discount_analysis["avg_order_count_before"],width=bar_width, label="Before Discount", color="orange")
ax.bar(x + bar_width, discount_analysis["avg_order_count_after"], width=bar_width, label="After Discount", color="green")

# label and title
ax.set_xlabel("Discount Applied")
ax.set_ylabel("Average Order Count")
ax.set_title("Average Order Count Before & After Discounts")
ax.set_xticks(x + bar_width / 2)
ax.set_xticklabels(discount_analysis["discount_applied"])
ax.legend()

# Show plot
plt.show()

bar_width = 0.35
x = np.arange(len(discount_analysis["discount_applied"]))
# figure
fig, ax = plt.subplots(figsize=(8, 5))

# bar plot
ax.bar(x, discount_analysis["avg_spend_before"],width=bar_width, label="Before Discount", color="red")
ax.bar(x + bar_width, discount_analysis["avg_spend_after"], width=bar_width, label="After Discount", color="green")

# label and title
ax.set_xlabel("Discount Applied")
ax.set_ylabel("Average Spend")
ax.set_title("Average spend Before & After Discounts")
ax.set_xticks(x + bar_width / 2)
ax.set_xticklabels(discount_analysis["discount_applied"])
ax.legend()

# Show plot
plt.show()

sns.catplot(x="discount_applied", y="avg_spend_change", kind="bar", data=discount_analysis)
plt.title("Discount Applied VS Avg. Spend change")

sns.catplot(x="discount_applied", y="avg_order_count_change", kind="bar", data=discount_analysis)
plt.title("Discount Applied VS Avg. Order count Change")



"""##[4(B)] Identify customer segments most responsive to discounts."""

# find in order_count change and total spend change
df["order_count_change"] = df["order_count_after"] - df["order_count_before"]
df["total_spend_change"] = df["total_spend_after"] - df["total_spend_before"]

# find responsiveness_score
df["responsiveness_score"] = (df["order_count_change"] + df["total_spend_change"]) / 2

# Filter customers with discounts and without discounts
discounted_customers = df[df["discount_applied"] == "Yes"]
non_discounted_customers = df[df["discount_applied"] == "No"]

# find top 5 most responsive customers in both groups
top_responsive_discounted = discounted_customers.nlargest(5, "responsiveness_score")
top_responsive_non_discounted = non_discounted_customers.nlargest(5, "responsiveness_score")

top_responsive_discounted

top_responsive_non_discounted

# Group by order count before discount
segment_analysis_before_discount = discounted_customers.groupby("order_count_before").agg(
    avg_order_count_change=("order_count_change", "mean"),
    avg_spend_change=("total_spend_change", "mean"),
    avg_responsiveness=("responsiveness_score", "mean")
).reset_index()

segment_analysis_before_discount

# Visualization
plt.figure(figsize=(8, 5))
sns.lineplot(x="order_count_before", y="avg_responsiveness", data=segment_analysis_before_discount, marker="o", color="blue", label="Responsiveness Score")
plt.xlabel("Order Count Before Discount")
plt.ylabel("Avg Responsiveness Score")
plt.title("Customer Responsiveness to Before Discounts by Order Count")
plt.legend()
plt.show()

# Group by order count before discount
segment_analysis_after_discount = non_discounted_customers.groupby("order_count_after").agg(
    avg_order_count_change=("order_count_change", "mean"),
    avg_spend_change=("total_spend_change", "mean"),
    avg_responsiveness=("responsiveness_score", "mean")
).reset_index()

segment_analysis_after_discount

# Visualization
plt.figure(figsize=(8, 5))
sns.lineplot(x="order_count_after", y="avg_responsiveness", data=segment_analysis_after_discount, marker="o", color="Green", label="Responsiveness Score")
plt.xlabel("Order Count After Discount")
plt.ylabel("Avg Responsiveness Score")
plt.title("Customer Responsiveness to After Discounts by Order Count")
plt.legend()
plt.show()

